				JavaScript
.....................................................................................
Topics:

1.Javascript language
2.Server side js
   -Node,Express
3.User interface Development lib
   React.js

Javascript language:

What is javascript?

 Javascript is programming language.

What type/style of type of PL?

 C is Procedural language
 C++ is Object oriented language
 Java is object oriented language

Javascript is object based and functional language programming.
JS is hybrid style languages.

Why javascript was created? who created 

Brendan eich.
  Javascript was created for building dynamic web inside browsers.
Programming language has versions

1995 -javascript 


ECMA  1996 - javascript 1.0  / ecma script 1.0 es 1.0

1997 - es 2.0 did not come

1999 - es 3.0

2007 - es 4.0
2008 - es 5.0
2012-2015 - es 6.0 - today most of javascript(ui) and back end apps are built using 
this version
2016- es 7

https://262.ecma-international.org/5.1/

stable releases : es5 and es 6
..................................................................................
				Where is javascript


Today js is every where

you can build client side apps - front end apps- react,angular,vue js
you can build server side apps - Node.js
you can build mobile apps - react native,iconic.......


Client side javascript apps:

javascript runtime:

running js code.

javascript runtime or javascript vms , generally embeded inside every web browser

chrome(v8)
firefox(spider monkey)
?
etc...

if you want to run javascript outside browser, nodejs
.....................................................................................

Learning path:

Programming language fundamentals
functional programming
Object based concepts
Browser apps - DOM programming


Programming language fundamentals:

variables,datatypes,values(literals)

javascript project setup:

Req:
1.node.js -https://nodejs.org/en/
2.vs code - editor
3.browser

Variables declaration:
//variables,values,
//var firstName="Subramanian" // 'Subramanian'
//string 
let firstName = "Subramanian" // 'Subramanian'
//numbers
let age = 18
//boolean 
let isActive = true
//undefined
let count;
//NaN 
let price;
let totalPrice = price * 100 // NaN

//infinity :div /0
let avgSalary =  1000/0

//print 
console.log("Name" + firstName)
console.log("Name", firstName)
console.log(`Name ${firstName}`) //back tick and interploation notation 
console.log(`Age ${age}`) //back tick and interploation notation 
console.log(`isActive ${isActive}`) //back tick and interploation notation 
console.log(`count ${count}`) //back tick and interploation notation 
console.log(`price ${price}`) //back tick and interploation notation 
console.log(`TotalPrice ${totalPrice}`) //back tick and interploation notation 
console.log(`Avg Salary ${avgSalary}`) //back tick and interploation notation 

...

let vs const

let you can reinialize
const you cant -  readonly

let a = 10
console.log(a)
a = 90
console.log(a)
const b =100
console.log(b)
b=90
index.js:7 Uncaught TypeError: Assignment to constant variable.
    at index.js:7:2
(anonymous) @ index.js:7

equal == and === / != / !==
//javascript operators are similar to java , c,c++
// equal operators
//if ..else also similar to java
//== compares only content: === compares content + type - which is recommended

let a = 10
let b = 20

//compare
if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')

}
let x = "10" //string 
let y = 10 //number
if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')

}
....................................................................................
				Booleans - Advanced booleans
....................................................................................
let isValid = true;

let a = 10;
let b = 20;
let isBig = a > b

if (isValid) {
    console.log('valid')
} else {
    console.log('invalid')
}
if (isBig) {
    console.log('Big')
} else {
    console.log('Not Big')
}
/**
 * In javascript everthing is true expect the following values
 * 
 * 1.boolean false 
 * 2.empty string "" ,''
 * 3.0
 * 4.undfined
 * 5.NaN
 * 6.null
 */

let firstName = "Subramanian"
if (firstName) {
    //truthy block
    console.log('Welcome ')
} else {
    //falsy block
    console.log('Good bye ')
}
let price = 0
if (price) {
    //truthy block
    console.log('Price ')
} else {
    //falsy block
    console.log('Good bye ')
}
price=undefined
if (price) {
    //truthy block
    console.log('Price ')
} else {
    //falsy block
    console.log('Good bye ')
}

price *10
if (price) {
    //truthy block
    console.log('Price ')
} else {
    //falsy block
    console.log('Good bye ')
}
..................................................................................
			     Functions
..................................................................................

//functions  declaration syntax:
//named functions
function sayHello() {
    console.log('Hello')
}
//innovcation
sayHello();
//anonmous functions 
/**
 * function itself is value/literal in js .
 * we can store the function into a variable
 * we can pass function as paremeter to another function
 * we can return function from another function  
 */

let a = 10;
let greet = function () {
    console.log('Greet')
};
greet();

// es 6 syntax : arrow functions 
let hai = () => {
    console.log('Greet')
};
hai();

//params and args ,return

//default args 
function add(a = 0, b = 0) {
    return a + b
}
console.log(add(1, 2))
console.log(add())

let substract = function (a = 0, b = 0) {
    return a - b
}
console.log(substract(1, 10))

let multiply = (a = 0, b = 0) => {
    return a * b
}
console.log(multiply(10, 10))
//reduce code : if function has only one statement - a * b , remove { } and return 
multiply = (a = 0, b = 0) => a * b
console.log(multiply(10, 10))
....................................................................................	
			 functional Programming
....................................................................................

Javascript is fundamentally functional style programming language.

Principles of fp:

1.Higher order functions
 
  function can receive input as another function as arg.
  function can return another fn


//Higher order functions 


function sayHello(callback){
    callback()
}
//passing lnline anonmous function 
sayHello(function(){
    console.log('hello')
})

//Higher order functions 

function sayHello(callback) {
    callback('hello')
}
//passing lnline anonmous function 
sayHello(function (message = "") {
    console.log(message)
})
let hello = function (message = "") {
    console.log(message)
}
sayHello(hello)
/////////////////////////////////////////////////////////////////////////////

let sayGreet = function (callback) {
    callback('greet')
}
sayGreet(function (message) {
    console.log(message)
})
///////////////////////////////////////////////////////////////////////////////

let login = (username, password, resolve, reject) => {
    if (username === 'admin' && password === 'admin') {
        resolve('Login success')
    } else {
        reject('Login Failed')
    }
}

login('admin', 'admin', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
})
login('ddd', 'dddd', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
})
....................................................................................
			 Closure - Return function from another function
...................................................................................
/**
 * 
 * @returns 
 * if inner function access outter function variables, then it becomes closure
 */
// function counter() {
//     let counter = 0
//     return function () {
//         return counter++
//     }
// }
const counter = () => {
    let counter = 0
    return () => counter++
}
const myfun = counter()
console.log(myfun())
console.log(myfun())
console.log(myfun())
....................................................................................
			  Object based programming
....................................................................................

objects:
=>using constructor pattern
    =>using functions
    =>using classes

//objects 
//constructors
function Employee(id = 0, name = '', salary = 0) {
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    //instance methods
    this.calculate = function (noofDays = 0) {
        return this.salary * noofDays
    }
}
//object creation
let emp = new Employee(1, 'Subramanian', 10000)
console.log(emp.id, emp.name, emp.salary, emp.calculate(8))
//es 6 syntax
class Customer {
    //instance variables
    constructor(id = 0, name = '', invoice = 0) {
        this.id = id
        this.name = name
        this.invoice = invoice
    }
    //instance methods
    calculate(qty = 0) {
        return this.invoice * qty
    }
}
let customer = new Customer(1, 'Subramanian', 18)
console.log(customer.id, customer.name, customer.invoice, customer.calculate(8))

=>using literal patterns

//literal objects 
let employee = {
    id: 1,
    name: 'Subramanian',
    address: {
        city: 'Coimbatore'
    }
}
console.log(`Id ${employee.id} name ${employee.name} city ${employee.address.city}`)
.....................................................................................
				Data Structures in js
.....................................................................................
Array : 
 -object
 -dynamic

//arrays

let list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
list.forEach(item => {
    console.log(item)
})
//list of employees
let empList = [
    {
        id: 1,
        name: 'A',
        salary: 1000
    },
    {
        id: 2,
        name: 'B',
        salary: 400
    },
    {
        id: 3,
        name: 'C',
        salary: 1900
    }

]
empList.forEach(employee => {
    console.log(employee.id, employee.name, employee.salary)
})
.....................................................................................













































